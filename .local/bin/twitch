#!/usr/bin/ruby
# coding: utf-8
# twitch-dmenu.rb
# written by Ogion (on freenode/archforum), inspired by Earnestly (likewise on freenode)
# edited by holomorph (on freenode)

require 'net/http'
require 'open3'
require 'json'
require 'thread'

module Twitch
  API = "https://api.twitch.tv/gql"
  QUERY = "query{users(logins:[%s]){id,login,displayName,stream{title,game{name}}}}"
  CLIENT_ID = "jzkbprff40iqj646a697cyrvl0zt2m6"
end

class Hash
  def format_title()
    self.dig("stream", "title").strip.gsub(/\r?\n/, " ")
  end

  def display_s(just)
    name = self.dig("displayName").ljust(just)
    "#{name}#{self.format_title} [#{self.dig("stream", "game", "name")}]"
  end

  def wintitle_s()
    name = self.dig("displayName")
    %Q(#{self.format_title} (#{name}))
  end
end

class String
  def take_until(char)
    x = index(char)
    return self if x.nil?
    x == 0 ? "" : self[0..(x - 1)]
  end
end

def xdg_config_twitch(name)
  xdg = ENV["XDG_CONFIG_DIR"]
  dir = xdg ? xdg : File.join(ENV["HOME"], ".config")
  File.join(dir, "twitch", name)
end

def parse_config(file)
  array = []
  IO.foreach(file) do |s|
    next if s.chomp.empty? || s.start_with?("#")
    array << s.take_until(?#).chomp.strip
  end
  array.uniq
end

def request(data)
  uri = URI(Twitch::API)
  res = Net::HTTP.start(uri.host, uri.port, :use_ssl => true) do |http|
    req = Net::HTTP::Post.new(uri)
    req['Client-ID'] = Twitch::CLIENT_ID
    http.request(req, data)
  end
  res.body
end

def get_streams()
  threads = []
  streams = []
  streams_mx = Mutex.new
  file = xdg_config_twitch("streamers")
  users = parse_config(file)

  users.each_slice(100) do |batch|
    threads << Thread.new do
      streams_mx.synchronize do

        query = format(Twitch::QUERY, batch.map{|e|"\"#{e}\""}.join(','))
        data = JSON.parse(request(JSON.generate([{:query => query}])))
        data[0].dig("data", "users").each do |u|
          streams << u unless u.nil? || u.dig("stream").nil?
        end
      end
    end
  end

  threads.each(&:join)
  streams
end

def dmenu(items)
  prompt = %W[-p Streams\ (#{items.count})]
  # font = %w[-fn -*-dina-bold-r-*-*-12-*-*-*-*-*-*-*]
  font = "DejaVu Sans Mono"
  args = %w[-i -l 20] + prompt

  if ENV["DISPLAY"] && !ENV["DISPLAY"].empty?
    cmd = %w[dmenu] + args + %W[-fn #{font}]
  else
    cmd = %w[bemenu] + args + %W[--fn #{font.gsub("-", " ")}]
  end

  out, status = Open3.capture2(*cmd, stdin_data: items.join("\n") + "\n")
  status.success? ? out.chomp : nil
end

def play_stream(item)
  uri = item[:uri] || "https://twitch.tv/#{item["login"]}"

  pid = fork do
    exec("mpv", %Q(--title=#{item.wintitle_s}), uri)
  end
  Process.wait(pid)
end

def play_selected(sel, streams)
  threads = []

  sel.split(/\r?\n/).each do |name|
    if item = streams.find{|i| name =~ /^#{i["displayName"]}/}
      threads << Thread.new do
        play_stream(item)
      end
    end
  end

  threads.each(&:join)
end

streams = get_streams()
unless streams.empty?
  width = streams.map{|i| i.dig("displayName").length}.max + 3
  menu = streams.sort_by{|i| i.dig("displayName").downcase}
  menu = menu.map{|i| i.display_s(width) }
  sel = dmenu(menu)
  play_selected(sel, streams) if sel
end
