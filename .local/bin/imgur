#!/bin/bash

# inspired by script written by Bart Nagel <bart@tremby.net>
# client id from <https://github.com/ceryn/img> at <https://imgur.com/tools/>
# requires curl, optionally uses xclip

readonly clientid="3e7a4deb7ac67da"
readonly authheader="Authorization: Client-ID $clientid"
readonly apiurl="https://api.imgur.com/3"

die() {
    printf >&2 "imgur: %s\n" "$@"
    exit 1
}

print_tag() {
    local input="$1"
    local regex="<$2>(.*)</$2>"

    # parse input for regex contents
    if [[ $input =~ $regex ]]; then
        printf "%s" "${BASH_REMATCH[1]}"
        return 0
    fi
    return 1
}

handle_response() {
    local response="$1"
    local err url del

    # check for errors from imgur
    if err=$(print_tag "$response" 'error'); then
        die "response: $err"
    fi

    # print direct image link
    if url=$(print_tag "$response" 'link'); then
        printf "url: %s\n" "$url"
    fi

    # print deletion link
    if del=$(print_tag "$response" 'deletehash'); then
        printf "del: curl -X DELETE -sH \"%s\" %s/image/%s\n" \
            "$authheader" "$apiurl" "$del" >&2
    fi

    # try putting the url on the clipboard
    if [[ -n $DISPLAY ]] && type -p xclip >/dev/null; then
        printf "%s" "$url" | xclip;
    fi
}

# check argument
if (( $# == 0 )); then
    die "no file specified"
elif [[ "$1" = @(-h|--help) ]]; then
    printf 'Usage: %s <file>\n' "${0##*/}"
    exit 0
fi

if [[ ! -f "$1" ]]; then
    die "no such file: $1"
fi

# upload the image
if response="$(curl -s -H "$authheader" -F "image=@$1" "$apiurl/upload.xml")";
then
    handle_response "$response"
else
    die "upload failed: $1"
fi
