#!/usr/bin/env python3
# t8 --- translate stuff with a google translate api
# https://developers.google.com/translate/v2/using_rest#language-params

import sys
import os.path
import getopt
import re
import urllib.request
import json


def usage():
    print("usage: %s [-h] [-d] [-t TL] [-s SL] <message>"
          % os.path.basename(sys.argv[0]))
    sys.exit(0)


def parse_opts():
    tl = sl = "auto"
    debug = False
    data = None

    try:
        optlist, args = getopt.getopt(sys.argv[1:], 't:s:dh')
    except getopt.GetoptError as e:
        print(e, file=sys.stderr)
        sys.exit(1)

    for opt, arg in optlist:
        if opt == '-h':
            usage()
        elif opt == '-t':
            tl = arg
        elif opt == '-s':
            sl = arg
        elif opt == '-d':
            debug = True
    if not args:
        data = sys.stdin.readlines()
        if not data:
            usage()

    message = " ".join(map(lambda s: re.sub(r"\r?\n", "", s),
                           data or args))
    return message, tl, sl, debug


def get_response(text, sl=u"auto", tl=u"auto"):
    """
    Processes a Translate API request given a desired message TEXT to be
    translated, source language SL, and translated language TL.  Returns
    decoded response.
    """

    api = "http://translate.google.com/translate_a"
    args = "&sl=%s&tl=%s&text=%s" % (sl, tl, urllib.parse.quote(text))
    url = api + "/t?client=t&ie=UTF-8&oe=UTF-8" + args
    req = urllib.request.Request(url, headers={'User-Agent': ''})

    return urllib.request.urlopen(req).read().decode('utf-8')


def pretty_print(response):
    # ugly hack to get valid json
    hack = response.replace(',,,', ',"","",').replace(',,', ',"",')
    hack = hack.replace('[,', '["",')
    data = json.loads(hack)
    if debug:
        print(data, file=sys.stderr)

    # useful bits
    sl = data[2]
    array = data[0][0]
    primary = array[0]
    alternate = array[2]

    # print the alternate form if it exists
    # auto sl is not perfect, so showing it in [%s] can be helpful
    fmt = "[%s] %s"
    args = (sl, primary)
    if alternate:
        fmt += " (%s)"
        args = (sl, primary, alternate)

    print(fmt % args)


message, tl, sl, debug = parse_opts()
text = get_response(message, sl, tl)
pretty_print(text)
