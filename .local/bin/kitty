#!/usr/bin/guile -s
!#
;; Inspired by the silly little tool by Ã˜yvind Heggstad.
;; See <https://github.com/MrElendig/kittypack>

(use-modules (ice-9 receive)
             (ice-9 threads)
             (json)
             (rnrs bytevectors)
             (web client)
             (web request)
             (web uri))

(define (request->body request)
  (let ((uri (request-uri request)))
    (receive (response body)
        (http-get uri #:port (open-socket-for-uri uri))
      (values body))))

(define (pkg->string pkg)
  (let* ((query (string-append "name=" pkg "&arch=x86_64&arch=any"))
         (uri (build-uri 'https
                        #:host "www.archlinux.org"
                        #:path "/packages/search/json/"
                        #:query query)))
    (utf8->string (request->body (build-request uri)))))

(define (color text ls)
  (string-append (string #\esc #\[) (string-join (map number->string ls) ";") "m"
                 text
                 (string #\esc #\[ #\m)))

(define (prettyprint->string table)
  (let ((flag (assoc-ref table "flag_date"))
        (epoch (assoc-ref table "epoch")))
    (format #f "~a/~a/~a  ~a ~a~%"
            (color (assoc-ref table "repo") '(1 35))
            (color (assoc-ref table "arch") '(1 33))
            (color (assoc-ref table "pkgname") '(1))
            (color (string-append
                    (if (positive? epoch) (format #f "~d:" epoch) "")
                    (assoc-ref table "pkgver") "-" (assoc-ref table "pkgrel"))
                   `(1 ,(if flag 31 32)))
            (if flag (color "<!>" '(31)) ""))))

(define (display-records pkg)
  (let* ((table (json-string->scm (pkg->string pkg)))
         (results (vector->list (assoc-ref table "results")))
         (list (map prettyprint->string results)))
    (map display (sort list string>?))))

(define (main)
  (if (> (length (command-line)) 1)
      (par-map display-records (cdr (command-line)))
      (begin (display "Usage: kitty <pkg> [<pkg> ...]\n" (current-error-port))
             (exit #f))))

(main)
